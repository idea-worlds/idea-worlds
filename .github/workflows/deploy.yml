name: deploy

on:
  push:
    branches: [ "release/*" ]
  workflow_dispatch:

env:
  docker-registry: ccr.ccs.tencentyun.com
  docker-namespace: ideaworlds
  remote-workdir: /app

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set env.project
        run: |
          echo "project=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_ENV

      - name: Set env.image
        run: |
          echo "image=${{ env.docker-registry }}/${{ env.docker-namespace }}/${{ env.project }}" >> $GITHUB_ENV

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYMMDD'

      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: npm build
        run: |
          npm ci
          npm run build:${{ env.project }}
          mv ./dist/${{ env.project }}/ ./deploy/dist/

      - name: docker build
        run: |
          cd ./deploy
          docker build -t ${{ env.image }}:latest .
          docker tag ${{ env.image }}:latest ${{ env.image }}:${{ steps.time.outputs.time }}

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.docker-registry }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push to Docker Registry
        run: |
          docker push ${{ env.image }}:latest
          docker push ${{ env.image }}:${{ steps.time.outputs.time }}

      - name: Run Docker Image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script_stop: true
          script: |
            mkdir -p ${{ env.remote-workdir }}/${{ env.docker-namespace }}/${{ env.project }}
            docker pull ${{ env.image }}:latest
            docker run --rm -v ${{ env.remote-workdir }}/${{ env.docker-namespace }}/${{ env.project }}:/app/data ${{ env.image }}:latest
            docker rmi ${{ env.image }}:latest
